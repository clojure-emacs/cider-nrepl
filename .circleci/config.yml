version: 2.1

# Default settings for executors

defaults: &defaults
  working_directory: ~/repo
  environment:
    # - limit the maximum heap size to prevent out of memory errors
    # - print stacktraces to console
    JVM_OPTS: >
      -Xmx3200m
      -Dclojure.main.report=stderr

# Runners for various OpenJDKs versions.

executors:
  jdk8:
    docker:
      - image: clojure:temurin-8-lein-2.11.2-noble
    <<: *defaults
  jdk11:
    docker:
      - image: clojure:temurin-11-lein-2.11.2-noble
    <<: *defaults
  jdk17:
    docker:
      - image: clojure:temurin-17-lein-2.11.2-noble
    <<: *defaults
  jdk21:
    docker:
      - image: clojure:temurin-21-lein-2.11.2-noble
    <<: *defaults
  jdk22:
    docker:
      - image: clojure:temurin-22-lein-2.11.2-noble
    <<: *defaults

# Runs a given set of steps, with some standard pre- and post-
# steps, including restoring of cache, saving of cache.
#
# Adapted from https://github.com/lambdaisland/meta/blob/master/circleci/clojure_orb.yml

commands:
  with_cache:
    description: |
      Run a set of steps with Maven dependencies and Clojure classpath cache
      files cached.
      This command restores ~/.m2 and .cpcache if they were previously cached,
      then runs the provided steps, and finally saves the cache.
      The cache-key is generated based on the contents of `deps.edn` present in
      the `working_directory`.
    parameters:
      steps:
        type: steps
      files:
        description: Files to consider when creating the cache key
        type: string
        default: "deps.edn project.clj build.boot"
      cache_version:
        type: string
        description: "Change this value to force a cache update"
        default: "1"
    steps:
      - run:
          name: Install wget, git, and node
          command: |
            apt-get update && apt-get install -y git nodejs wget
      - run:
          name: Generate Cache Checksum
          command: |
            for file in << parameters.files >>
            do
              find . -name $file -exec cat {} +
            done | sha256sum | awk '{print $1}' > /tmp/clojure_cache_seed
      - restore_cache:
          key: clojure-<< parameters.cache_version >>-{{ checksum "/tmp/clojure_cache_seed" }}
      - steps: << parameters.steps >>
      - save_cache:
          paths:
            - ~/.m2
            - linux-install-1.10.3.1040.sh
            - clojure-tools-1.10.3.1040.tar.gz
            - .cpcache
          key: clojure-<< parameters.cache_version >>-{{ checksum "/tmp/clojure_cache_seed" }}

# The jobs are relatively simple. One runs utility commands against
# latest stable JDK + Clojure, the other against specified versions

jobs:

  util_job:
    description: |
      Running utility commands/checks (linter etc.)
    parameters:
      steps:
        type: steps
    executor: jdk11
    environment:
      CLOJURE_VERSION: "1.11.4"
    steps:
      - checkout
      - with_cache:
          cache_version: "util_v1_1.11.4"
          steps: << parameters.steps >>

  deploy:
    # JDK 8 is preferred for deployments (https://github.com/benedekfazekas/mranderson/issues/57)
    executor: jdk8
    environment:
      # Parallelism is disabled, at least for now
      # (https://github.com/benedekfazekas/mranderson/issues/56)
      LEIN_JVM_OPTS: -Dmranderson.internal.no-parallelism=true
    steps:
      - checkout
      - run:
         name: Deploy
         command: |
           lein with-profile -user,+deploy run -m deploy-release make deploy

  test_code:
    description: |
      Run tests against given version of JDK and Clojure
    parameters:
      jdk_version:
        description: Version of JDK to test against
        type: string
      clojure_version:
        description: Version of Clojure to test against
        type: string
      parser_target:
        description: The Orchard Java parser to be exercised
        type: string
      test_command:
        description: The command to run
        type: string
    executor: << parameters.jdk_version >>
    environment:
      CLOJURE_VERSION: << parameters.clojure_version >>
      PROJECT_VERSION: 999.99.9
    steps:
      - checkout
      - with_cache:
          cache_version: "test_code_v1_<< parameters.clojure_version >>"
          steps:
            - run:
                name: Running tests with inlined deps
                command: PARSER_TARGET=<< parameters.parser_target >> make --debug << parameters.test_command >>
            - run:
                name: Install the Clojure CLI
                command: |
                  # the `nc` option skips downloading a file as already present
                  # (as allowed by the Circle caching).
                  wget -nc https://download.clojure.org/install/linux-install-1.10.3.1040.sh
                  sed -i 's/curl -O/wget -nc/g' linux-install-1.10.3.1040.sh
                  chmod +x linux-install-1.10.3.1040.sh
                  ./linux-install-1.10.3.1040.sh
            - run:
                name: Running tests specific to tools.deps
                command: make tools-deps-test

# The ci-test-matrix does the following:
#
# - run tests against the target matrix
# - linter, eastwood and cljfmt

tags_filter: &tags_filter
  tags:
    only: /^v\d+\.\d+\.\d+(-alpha\d*)?(-beta\d*)?$/

workflows:
  version: 2.1
  ci-test-matrix:
    jobs:
      - test_code:
          matrix:
            alias: "test_code_jdk8"
            parameters:
              clojure_version: ["1.10", "1.11", "1.12"]
              jdk_version: [jdk8]
              # It doesn't make sense to exercise the newer Orchard Java parsers against JDK8
              # (given that JDK8 is explicitly excluded by those parsers)
              parser_target: ["legacy-parser"]
              test_command: ["test", "smoketest"]
          filters:
            branches:
              only: /.*/
            <<: *tags_filter
      - test_code:
          matrix:
            alias: "test_code"
            parameters:
              clojure_version: ["1.10", "1.11", "1.12"]
              jdk_version: [jdk11, jdk17, jdk21, jdk22]
              # Don't test legacy parser on JDK11+ since it is never invoked there.
              parser_target: ["parser-next", "parser"]
              test_command: ["test", "smoketest"]
          filters:
            branches:
              only: /.*/
            <<: *tags_filter
      - util_job:
          name: Code Linting
          filters:
            branches:
              only: /.*/
            <<: *tags_filter
          steps:
            - run:
                name: Running cljfmt
                command: |
                  make cljfmt
            # TODO: use `make kondo` instead once there's a fix for https://github.com/clj-kondo/clj-kondo/issues/2189
            - run:
                name: Running clj-kondo
                command: |
                  make light-kondo
            - run:
                name: Running Eastwood
                command: |
                  make eastwood
      - deploy:
          requires:
            - "test_code"
            - "test_code_jdk8"
            - "Code Linting"
          filters:
            branches:
              ignore: /.*/
            <<: *tags_filter
